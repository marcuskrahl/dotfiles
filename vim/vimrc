set nocompatible
filetype off

" Auto Install vim plug

if has('nvim')
    if has('win32')
        if empty(glob('~\vimfiles\autoload\plug.vim'))
            silent !md ~\vimfiles\autoload
            silent !(New-Object Net.WebClient).DownloadFile( "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",$ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath("~\vimfiles\autoload\plug.vim")
            )
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    else
        if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
          silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    endif
else
    if has('win32')
        if empty(glob('~\AppData\Local\nvim\autoload\plug.vim'))
            silent !md ~\vimfiles\autoload
            silent !(New-Object Net.WebClient).DownloadFile( "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",$ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath("~\AppData\Local\nvim\autoload\plug.vim")
            )
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    else
        if empty(glob('~/.vim/autoload/plug.vim'))
          silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    endif
endif

call plug#begin()

" Plug 'OmniSharp/omnisharp-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'matze/vim-move'
" Plug 'scrooloose/syntastic'
Plug 'jedverity/feral-vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'jceb/vim-orgmode' | Plug 'tpope/vim-speeddating'
Plug 'raghur/fruzzy' " fuzzy file finder
Plug 'scrooloose/nerdtree'

" c#
Plug 'OrangeT/vim-csharp'

" tsuquyomi
" Plug 'HerringtonDarkholme/yats.vim'
" Plug 'shougo/vimproc.vim', { 'do': 'make' }
" Plug 'quramy/tsuquyomi'

" vim lsp
" Plug 'HerringtonDarkholme/yats.vim'
" Plug 'prabirshrestha/async.vim'
" Plug 'prabirshrestha/vim-lsp'
"
"
"
"

"nvim typescript
" Plug 'HerringtonDarkholme/yats.vim'
" Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
"nvim typescript end

" vim lsc
" Plug 'HerringtonDarkholme/yats.vim'
" Plug 'Shougo/deoplete.nvim'
" Plug 'Shougo/denite.nvim'
" Plug 'natebosch/vim-lsc'



" LanguageClient neovim
" Plug 'HerringtonDarkholme/yats.vim'
" Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
" Plug 'Shougu/deoplete.nvim', { 'do': 'UpdateRemotePlugins' }
" Plug 'w0rp/ale'
"LanguageClient neovim end

"coc.nvim
Plug 'HerringtonDarkholme/yats.vim'
Plug 'neoclide/coc.nvim', { 'do': { -> coc#util#install() } }
" :CocInstall coc-tsserver coc-tslint-plugin
" Plug 'Shougo/deoplete.nvim'
" Plug 'Shougo/denite.nvim'

"FZF
if !empty(glob('/usr/share/vim/vimfiles/plugin/fzf.vim'))
    so /usr/share/vim/vimfiles/plugin/fzf.vim
    Plug 'junegunn/fzf.vim'
endif

"deoplete
if has('nvim')
"  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
 " Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
" let g:deoplete#enable_at_startup = 1
" Typescript dependencies
" Plug 'leafgarland/typescript-vim'
" Plug 'Quramy/tsuquyomi'
" Plug 'Shougo/vimproc.vim', { 'do': 'make' }
" Plug 'fsharp/vim-fsharp', { 'for': 'fsharp', 'do': 'make fsautocomplete' }

call plug#end()

filetype plugin indent on

set termguicolors
set modelines=0

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber 
" set undofile
syntax on
set background=dark
colorscheme feral

let mapleader = " "

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

nnoremap <leader>r :RustRun<cr>

" set wrap
" set textwidth=79
" set formatoptions=qrn1
" set colorcolumn=85

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

inoremap jj <Esc>

au FocusLost * :wa

nmap <c-s> :w<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s> 

let g:LatexBox_show_warnings=0

set statusline=
set statusline+=%<\                          "cut at start
set statusline+=%2*[%n%H%M%R%W]%*\           "flags
set statusline+=%-40f\                       "path
set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]              " file format
set statusline+=%#warningmsg#                " switch to warning color
" set statusline+=%{SyntasticStatuslineFlag()} " syntastic errors
set statusline+=%*                           " back to normal color
set statusline+=%=                           " right align
set statusline+=%10((%l,%c)%)\               " line and column
set statusline+=%P                           " percentage of file


let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

nmap üü <c-]>

" let g:tsuquyomi_completion_detail = 1
" autocmd FileType typescript setlocal completeopt+=menu,preview

" folded highlighting defaults to a light blue which is unreadable - overwrite
" it here with a better shade
hi Folded ctermbg=8

" change move commands
let g:move_key_modifier = 'C'


" FZF commands
nmap <c-p> :Files<cr>

" org mode config
"


" Language Server Protocol
" let g:LanguageClient_autoStart = 1
"  let g:LanguageClient_serverCommands = {}
"  if executable('javascript-typescript-stdio')
"      let g:LanguageClient_serverCommands.javascript = ['javascript-typescript-stdio']
"      let g:LanguageClient_serverCommands.typescript = ['javascript-typescript-stdio']
"      let g:LanguageClient_serverCommands.rust = ['rustup', 'run', 'stable', 'rls']
"      "let g:LanguageClient_serverCommands.typescript = ['tcp://127.0.0.1:2089']
"      autocmd FileType javascript setlocal omnifunc=LanguageClient#complete
"      autocmd FileType typescript setlocal omnifunc=LanguageClient#complete
"      nnoremap <silent> <leader>lh :call LanguageClient#textDocument_hover()<CR>
"      nnoremap <silent> <leader>ld :call LanguageClient#textDocument_definition()<CR>
"      nnoremap <silent> <leader>lr :call LanguageClient#textDocument_rename()<CR>
"      nnoremap <silent> <leader>la :call LanguageClient#textDocument_codeAction()<CR>
"      nnoremap <silent> <leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>
"      nnoremap <silent> <leader>lS :call LanguageClient#workspace_symbol()<CR>
"  
"      let g:LanguageClient_selectionUI = 'location-list'
"      let g:LanguageClient_fzfContextMenu = 0 
"      
"  
"  "    let g:LanguageClient_loggingFile = '/tmp/LanguageClient.log'
"  "    let g:LanguageClient_loggingLevel = 'INFO'
"  "    let g:LanguageClient_serverStderr = '/tmp/LanguageServer.log'
"      let g:LanguageClient_waitOutputTimeout = 1
"  else
"      echo "javascript-typescript-stdio not installed!\n"
"      :cq
"  endif


" VIM LSP
" if executable('javascript-typescript-stdio')
    " au User lsp_setup call lsp#register_server({
        " \ 'name': 'javascript-typescript-stdio',
        " \ 'cmd': {server_info->[&shell, &shellcmdflag, 'javascript-typescript-stdio']},
        " \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        " \ 'whitelist': ['typescript'],
        " \ })
" endif
 
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode



" vim-lsc
let g:lsc_server_commands = {'typescript': 'javascript-typescript-stdio'}
let g:lsc_enable_autocomplete = v:true
let g:lsc_auto_map = v:true 


" nvim-typescript
let g:deoplete#enable_at_startup = 1

"tsuquyomi
"autocmd FileType typescript setlocal completeopt+=menu,preview
" set ballooneval
" autocmd FileType typescript setlocal balloonexpr=tsuquyomi#balloonexpr()
"autocmd FileType typescript nmap <buffer> <Leader>t : <C-u>echo tsuquyomi#hint()<CR>

"fruzzy
" call denite#custom#source('_', 'matchers', ['matcher/fruzzy'])
" let g:fruzzy#usenative = 1
" restrict to git in git directories
" call denite#custom#alias('source', 'file/rec/git', 'file/rec')
	" call denite#custom#var('file/rec/git', 'command',
	"\ ['git', 'ls-files', '-co', '--exclude-standard'])
	" nnoremap <silent> <C-p> :<C-u>Denite
" \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>


"Coc.nvim

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Or use formatexpr for range format
set formatexpr=CocAction('formatSelected')

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)


" Add diagnostic info for https://github.com/itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }



" Shortcuts for denite interface
" Show symbols of current buffer
 nnoremap <silent> <space>o  :<C-u>CocList coc-symbols<cr>
" Search symbols of current workspace
nnoremap <silent> <space>t  :<C-u>CocList coc-workspace<cr>
" Show diagnostics of current workspace
nnoremap <silent> <space>a  :<C-u>CocList coc-diagnostic<cr>
" Show available commands
nnoremap <silent> <space>c  :<C-u>CocList coc-command<cr>
" Show available services
nnoremap <silent> <space>s  :<C-u>CocList coc-service<cr>
" Show links of current buffer
nnoremap <silent> <space>l  :<C-u>CocList coc-link<cr>


" fuzzy finding config
nnoremap <C-p> :Files<cr>
nnoremap <C-b> :Buffers<cr>
tnoremap <C-b> :Buffers<cr>

" tmux like windows
nnoremap <C-a>c :terminal<cr>
nnoremap <A-n> :bnext<cr>
nnoremap <A-p> :bprev<cr>

" easy exit terminal
tnoremap jj <C-\><C-n> 



"nerdtree config
nnoremap <leader>ff :NERDTreeFocus<cr>
nnoremap <leader>fc :NERDTreeClose<cr>

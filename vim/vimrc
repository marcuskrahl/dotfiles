set nocompatible
filetype off

" Auto Install vim plug

if has('nvim')
    if has('win32')
        if empty(glob('~\vimfiles\autoload\plug.vim'))
            silent !md ~\vimfiles\autoload
            silent !(New-Object Net.WebClient).DownloadFile( "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",$ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath("~\vimfiles\autoload\plug.vim")
            )
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    else
        if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
          silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    endif
else
    if has('win32')
        if empty(glob('~\AppData\Local\nvim\autoload\plug.vim'))
            silent !md ~\vimfiles\autoload
            silent !(New-Object Net.WebClient).DownloadFile( "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",$ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath("~\AppData\Local\nvim\autoload\plug.vim")
            )
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    else
        if empty(glob('~/.vim/autoload/plug.vim'))
          silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
          autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
        endif
    endif
endif

call plug#begin()

" Plug 'OmniSharp/omnisharp-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'matze/vim-move'
"Plug 'scrooloose/syntastic'
"Plug 'OrangeT/vim-csharp'
"Plug 'file:///home/marcus/tmp/vim-csharp'
Plug 'jedverity/feral-vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
Plug 'jceb/vim-orgmode' | Plug 'tpope/vim-speeddating'
" Plug 'prabirshrestha/async.vim'
" Plug 'prabirshrestha/vim-lsp'

"FZF
if !empty(glob('/usr/share/vim/vimfiles/plugin/fzf.vim'))
    so /usr/share/vim/vimfiles/plugin/fzf.vim
    Plug 'junegunn/fzf.vim'
endif

"deoplete
if has('nvim')
"  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1
" Typescript dependencies
Plug 'leafgarland/typescript-vim'
" Plug 'Quramy/tsuquyomi'
" Plug 'Shougo/vimproc.vim', { 'do': 'make' }
" Plug 'fsharp/vim-fsharp', { 'for': 'fsharp', 'do': 'make fsautocomplete' }

call plug#end()
filetype plugin indent on

set termguicolors
set modelines=0

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber 
" set undofile
syntax on
set background=dark
colorscheme feral

let mapleader = " "

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

nnoremap <leader>r :RustRun<cr>

" set wrap
" set textwidth=79
" set formatoptions=qrn1
" set colorcolumn=85

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

inoremap jj <Esc>

au FocusLost * :wa

nmap <c-s> :w<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s> 

let g:LatexBox_show_warnings=0

set statusline=
set statusline+=%<\                          "cut at start
set statusline+=%2*[%n%H%M%R%W]%*\           "flags
set statusline+=%-40f\                       "path
set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]              " file format
set statusline+=%#warningmsg#                " switch to warning color
set statusline+=%{SyntasticStatuslineFlag()} " syntastic errors
set statusline+=%*                           " back to normal color
set statusline+=%=                           " right align
set statusline+=%10((%l,%c)%)\               " line and column
set statusline+=%P                           " percentage of file


let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

nmap üü <c-]>

" let g:tsuquyomi_completion_detail = 1
" autocmd FileType typescript setlocal completeopt+=menu,preview

" folded highlighting defaults to a light blue which is unreadable - overwrite
" it here with a better shade
hi Folded ctermbg=8

" change move commands
let g:move_key_modifier = 'C'


" FZF commands
nmap <c-p> :Files<cr>

" org mode config
"


" Language Server Protocol
" autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
let g:LanguageClient_autoStart = 1
let g:LanguageClient_serverCommands = {}
if executable('javascript-typescript-stdio')
    let g:LanguageClient_serverCommands.javascript = ['javascript-typescript-stdio']
    let g:LanguageClient_serverCommands.typescript = ['javascript-typescript-stdio']
    "let g:LanguageClient_serverCommands.typescript = ['tcp://127.0.0.1:2089']
    autocmd FileType javascript setlocal omnifunc=LanguageClient#complete
    autocmd FileType typescript setlocal omnifunc=LanguageClient#complete
    nnoremap <silent> <leader>lh :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> <leader>ld :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <leader>lr :call LanguageClient#textDocument_rename()<CR>
    nnoremap <silent> <leader>la :call LanguageClient#textDocument_codeAction()<CR>
    nnoremap <silent> <leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>
    nnoremap <silent> <leader>lS :call LanguageClient#workspace_symbol()<CR>
    

    let g:LanguageClient_loggingFile = '/tmp/LanguageClient.log'
    let g:LanguageClient_loggingLevel = 'INFO'
    let g:LanguageClient_serverStderr = '/tmp/LanguageServer.log'
    let g:LanguageClient_waitOutputTimeout = 10
else
    echo "javascript-typescript-stdio not installed!\n"
    :cq
endif

if executable('javascript-typescript-stdio')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'javascript-typescript-stdio',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'javascript-typescript-stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript'],
        \ })
endif

let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
